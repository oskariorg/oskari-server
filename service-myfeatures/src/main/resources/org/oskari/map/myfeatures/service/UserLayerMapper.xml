<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.oskari.map.userlayer.service.UserLayerMapper">

    <resultMap id="UserLayerResult" type="UserLayer">
        <result property="id" column="id" />
        <result property="uuid" column="uuid" />
        <result property="layer_name" column="layer_name" />
        <result property="layer_desc" column="layer_desc" />
        <result property="layer_source" column="layer_source" />
        <result property="fields" column="fields" />
        <result property="publisher_name" column="publisher_name" />
        <result property="wkt" column = "wkt" />
        <result property="options" column = "options" />
        <result property="locale" column = "locale" />
        <result property="created" column = "created" jdbcType="TIMESTAMP" javaType="java.time.OffsetDateTime" />
    </resultMap>

    <resultMap id="UserLayerDataResult" type="UserLayerData">
        <result property="id" column="id" />
        <result property="user_layer_id" column="user_layer_id" />
        <result property="uuid" column="uuid" />
        <result property="feature_id" column="feature_id" />
        <result property="property_json" column="property_json" />
        <result property="wkt" column="wkt" />
        <result property="databaseSRID" column="srid"/>
        <result property="created" column = "created" jdbcType="TIMESTAMP" javaType="java.time.OffsetDateTime" />
        <result property="updated" column = "updated" jdbcType="TIMESTAMP" javaType="java.time.OffsetDateTime" />
    </resultMap>


	<!-- UserLayer related -->
	<insert id="insertUserLayer" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
		INSERT INTO user_layer (
        uuid,
        layer_name,
        layer_desc,
        layer_source,
        fields,
        publisher_name,
        wkt,
        options,
        locale
        ) VALUES (
        #{uuid},
        #{layer_name},
        #{layer_desc},
        #{layer_source},
        CAST (#{fields} as json),
        #{publisher_name},
        #{wkt},
        CAST (#{options} as json),
        CAST (#{locale} as json)
        )
    </insert>
	
	<update id="updateUserLayer">
        update
        user_layer set
        layer_name = #{layer_name},
        layer_desc = #{layer_desc},
        layer_source = #{layer_source},
        fields = CAST (#{fields} as json),
        publisher_name = #{publisher_name},
        wkt = #{wkt},
        options = CAST (#{options} as json),
        locale = CAST (#{locale} as json)
        where id = #{id} and uuid = #{uuid}
    </update>

    <select id="findUserLayer" resultMap="UserLayerResult" useCache="false">
        select
        id,
        uuid,
        layer_name,
        layer_desc,
        layer_source,
        fields,
        publisher_name,
        wkt,
        options,
        locale,
        created
        from
        user_layer
        where id = #{id}  
    </select>

    <select id="findUserLayerByUuid" resultMap="UserLayerResult" useCache="false">
        select
          id,
        uuid,
        layer_name,
        layer_desc,
        layer_source,
        fields,
        publisher_name,
        wkt,
        options,
        locale,
        created
        from
         user_layer
        where uuid = #{uuid} 
    </select>

    <delete id="deleteUserLayer">
        DELETE FROM user_layer WHERE id = #{id}
    </delete>

    <update id="updatePublisherName">
        update user_layer set
            publisher_name = #{publisher_name}
        where uuid = #{uuid} and id = #{id}
    </update>

    <select id="getUserLayerBbox" resultType="String" useCache="false">
		SELECT
		ST_AsText(ST_Extent (geometry))
		FROM
		user_layer_data
		WHERE
		user_layer_id = #{userLayerId}
	</select>

	<!-- UserLayerData related-->
	<insert id="insertUserLayerData" useGeneratedKeys="true" keyProperty="user_layer_data.id" keyColumn="id">
        INSERT INTO user_layer_data
        (
            user_layer_id,
            uuid,
            feature_id,
            property_json,
            geometry
        ) VALUES (
            #{user_layer_id},
            #{user_layer_data.uuid},
            #{user_layer_data.feature_id},
            CAST(#{user_layer_data.property_json} as json),
            ST_SetSRID(ST_GeomFromGeoJSON(#{user_layer_data.geometry}), #{srid})
        )
    </insert>

    <update id="updateUserLayerData">
        UPDATE user_layer_data
        SET property_json = #{property_json},
            geometry = ST_GeomFromGeoJSON(#{geometry})
        WHERE feature_id = #{feature_id}
          AND uuid = #{uuid}
    </update>

	<delete id="deleteUserLayerDataByLayerId">
        DELETE FROM user_layer_data WHERE user_layer_id = #{userLayerId}
    </delete>	

	<delete id="deleteUserLayerData">
        DELETE FROM user_layer_data WHERE id = #{id}
    </delete>

</mapper>