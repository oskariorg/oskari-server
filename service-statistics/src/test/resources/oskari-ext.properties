
##################################
# Environment config
##################################

# change to match your database connection parameters
db.jndi.name=jdbc/OskariPool
db.url=jdbc:postgresql://192.168.0.64:5678/hsy_oskaridb
db.username=postgres
db.password=sergtsoP

# mark any addition module property tokens so we can check/add them automagically
# NOTE! 'sample' module updates views to include new functionalities! If you have defined custom views REMOVE IT!
db.additional.modules=myplaces,analysis,userlayer,sample,statistics

# set development to false or comment it out to load using minified javascript
development=true
oskari.client.version=dist/1.29

# geoserver params for setup
geoserver.url=http://localhost:8080/geoserver
geoserver.user=admin
geoserver.password=geoserver

# Logger implementation - SystemLogger logs into System.out/err
oskari.logger=fi.nls.oskari.log.SystemLogger

# this is used as baseurl for published maps (external url)
oskari.domain=http://localhost:8080

# path for incoming calls to access map
oskari.map.url=/

# url path to call for ajax requests/action routes
oskari.ajax.url.prefix=/action?

# redis
redis.hostname=localhost
redis.port=6379
redis.pool.size=10

# Supported locales, comma separated and default first
oskari.locales=en_US,fi_FI,sv_SE,es_ES

# Used by metadata flyout/CSW coverage scheduled task
service.metadata.url=http://localhost:8080/geonetwork

# Allow published maps to be loaded from these domains
view.published.usage.unrestrictedDomains = localhost

# "CMS content" files location
actionhandler.GetArticlesByTag.dir=/articlesByTag/

##################################
# User handling
##################################
# true all ssl certs/hosts for debugging! configure certs on the server for production
oskari.trustAllCerts=true
# true all ssl certs/hosts for debugging! configure certs on the server for production
oskari.trustAllHosts=true

# UserService implementation - create own implementation to integrate into actual systems and provide feedback for missing interface methods.
oskari.user.service=fi.nls.oskari.user.DatabaseUserService

##################################
# Configurations specific to database content
##################################
# Used to configure a template view for publishing maps, defaults to view with id 1
view.template.publish=2

view.default=4

# To enable role specific default views, uncomment these
#view.default.Admin=4
#view.default.Guest=1
#view.default.User=3
#view.default.roles=Admin, User, Guest

# Used to change the Admin role name
#oskari.user.role.admin=Admin

# bundles that are added on runtime to view if user has one of configured role
actionhandler.GetAppSetup.dynamic.bundles = admin-layerselector, admin-layerrights, admin-users, admin

# Linking dynamic bundles based on user roles
# Properties are named 'actionhandler.GetAppSetup.dynamic.[BUNDLE ID].roles'
#   with value as comma-separated list of role names that should be served the bundle
actionhandler.GetAppSetup.dynamic.bundle.admin-layerrights.roles = Admin
actionhandler.GetAppSetup.dynamic.bundle.admin-layerselector.roles = Admin
actionhandler.GetAppSetup.dynamic.bundle.admin-users.roles = Admin
actionhandler.GetAppSetup.dynamic.bundle.admin.roles = Admin

##################################
# Search channels configuration
##################################

# comma-separated list of id for search channel that will be used (defaulted to) if none are explicitly configured
#search.channels.default=OPENSTREETMAP_CHANNEL

# comma-separated list of search channel ids to use (whitelist)
#search.channels=OPENSTREETMAP_CHANNEL, METADATA_CATALOGUE_CHANNEL

# comma-separated list of search channel ids used by GetSearchResult
actionhandler.GetSearchResult.channels=OPENSTREETMAP_CHANNEL

# OpenStreetMap search channel settings
search.channel.OPENSTREETMAP_CHANNEL.service.url=http://nominatim.openstreetmap.org/search
# Uncomment the forceXY property if you have a forced coordinate order set by system property AND the used projection is affected by this (for example EPSG:4326)
# For example the included geoserver uses the system property so this flag needs to be enabled when used with EPSG:4326
search.channel.OPENSTREETMAP_CHANNEL.forceXY=true

##############################
# Proxy services
##############################
oskari.proxyservices = print, wfsquery, myplacestile, userlayertile, analysistile

oskari.proxy.print.url=http://localhost:8080/oskari-printout-backend/imaging/service/thumbnail/extent.jsonp
oskari.proxy.print.params=zoomLevel,coord,mapLayers,showMarker,forceCache,noSavedState,pageSize
oskari.proxy.print.header.Content-Type=application/json; charset=UTF-8

oskari.proxy.wfsquery.handler=fi.nls.oskari.service.WFSQueryProxyHandler
oskari.proxy.wfsquery.header.Content-Type=text/xml

oskari.proxy.myplacestile.url=http://localhost:8080/geoserver/wms?CQL_FILTER=
oskari.proxy.myplacestile.handler=fi.nls.oskari.proxy.MyPlacesProxyHandler
oskari.proxy.myplacestile.user=admin
oskari.proxy.myplacestile.pass=geoserver

oskari.proxy.userlayertile.url=http://localhost:8080/geoserver/wms?buffer=128&tiled=yes&tilesorigin=0,0&CQL_FILTER=
oskari.proxy.userlayertile.handler=fi.nls.oskari.proxy.UserLayerProxyHandler
oskari.proxy.userlayertile.user=admin
oskari.proxy.userlayertile.pass=geoserver


oskari.proxy.analysistile.url=http://localhost:8080/geoserver/wms?buffer=128&tiled=yes&tilesorigin=0,0&CQL_FILTER=
oskari.proxy.analysistile.handler=fi.nls.oskari.proxy.AnalysisProxyHandler
oskari.proxy.analysistile.user=admin
oskari.proxy.analysistile.pass=geoserver

##############################
# Print service configuration
# Note! requires 'print' in config for oskari.proxyservices
##############################
service.print.maplink.json.url=http://localhost:8080/oskari-printout-backend/imaging/service/thumbnail/maplinkjson
service.print.maplink.geojson.url=http://localhost:8080/oskari-printout-backend/imaging/service/thumbnail/maplinkgeojson

##############################
# Myplaces configuration
# Note! requires 'myplacestile' in config for oskari.proxyservices
##############################

# My places query url - edit url/user/pw
# MyPlacesBundleHandler.java, GeoServerProxyService.java
myplaces.ows.url=http://localhost:8080/geoserver/oskari/ows?
# MapFullHandler.java, MyPlacesHandler.java
myplaces.wms.url=http://localhost:8080/geoserver/oskari/wms?buffer=128&tiled=yes&tilesorigin=0,0&CQL_FILTER=
myplaces.user=admin
myplaces.password=geoserver
# Base WFS layer id for myplaces (oskari_maplayer table)
# Find correct id layer later on when my_places wfs layer is inserted
## NOTE! This layer must have the same url as in 'myplaces.ows.url'
myplaces.baselayer.id=1
# My places namespace
myplaces.xmlns=http://www.oskari.org
# My places namespace prefix
myplaces.xmlns.prefix=oskari

##############################
# User layers configuration
# Note! requires 'userlayertile' in config for oskari.proxyservices
##############################

# Userlayer base WFS layer id for vuser_data layer (look at oskari_maplayer table)
## NOTE! This layer must have the same url as in 'userLayer.oskari.url'
userlayer.baselayer.id=3

# user data store (user layers) properties - edit url/user/pw
userLayer.oskari.url=http://localhost:8080/geoserver/oskari/wfs?
userlayer.user=admin
userlayer.password=geoserver
# Userlayer rendering Url when using some other way than 
# if commented out, then ..userlayertile.. setup is used -
#userlayer.rendering.url=/karttatiili/userlayerhandler?

# Userlayer rendering Element (view table)
userlayer.rendering.element=oskari:user_layer_data_style
# Userlayer max features count  allowed to store (-1 unlimited)
userlayer.maxfeatures.count=-1
# Userlayer max file size in Mb
userlayer.max.filesize.mb=10

##############################
# Analysis configuration
# Note! requires 'analysistile' in config for oskari.proxyservices
##############################
geoserver.wps.url=http://localhost:8080/geoserver/wps
# Url for wfs-t analysis
geoserver.wfs.url=http://localhost:8080/geoserver/wfs
geoserver.wms.url=http://localhost:8080/geoserver/wms?buffer=128&tiled=yes&tilesorigin=0,0&CQL_FILTER=
geoserver.wms.user=admin
geoserver.wms.pass=geoserver

# Analysis base WFS layer id
## NOTE! This layer must have the same url as in 'geoserver.wfs.url'
analysis.baselayer.id=2
# Analysis rendering Url
#analysis.rendering.url=/karttatiili/analysis?
# Analysis rendering Element (view table)
analysis.rendering.element=oskari:analysis_data_style

sotka.baseurl=http://www.sotkanet.fi/rest
kapa.baseurl=file:///opt/oskari/mockresponses
pxweb.baseurl=http://pxweb.hel.ninja/PXWeb/api/v1/en/hri/hri/