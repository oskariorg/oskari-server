# ${foo} are replaced by Maven during build.
# set development to false or comment it out to load using minified javascript
# (requires minified version of the javascript to be compiled and servlet init-param to set the version to load)
development=${oskari.client.development}

# set to true to get database populated with initial demo content
oskari.init.db=${oskari.init.db}

# Logger implementation - SystemLogger logs into System.out/err, replace with logging implementation of your choice
oskari.logger=${oskari.logger.className}

# url path to call for ajax requests/action routes
oskari.ajax.url.prefix=${oskari.ajax.url.prefix}

# UserService implementation - create own implementation to integrate into actual systems and provide feedback for missing interface methods.
oskari.user.service=${oskari.user.service.className}

# Administrator role - special handling for action routes (deleting map layers and such)
oskari.user.role.admin=${oskari.user.role.admin}

# Configuring search channel implementations for search services.
# Properties are prefixed with 'search.channel.[CHANNEL ID].':
#   className indicates the implementation class
#   other properties are passed on to the implementation class.

# OpenStreetMap search channel settings
search.channel.OPENSTREETMAP_CHANNEL.className=fi.nls.oskari.search.OpenStreetMapSearchChannel
search.channel.OPENSTREETMAP_CHANNEL.service.url=http://nominatim.openstreetmap.org/search

# comma-separated list of search channel ids that should be registered for search service
search.channels=OPENSTREETMAP_CHANNEL

# comma-separated list of id for search channel that will be used (defaulted to) if none are explicitly configured
search.channels.default=OPENSTREETMAP_CHANNEL

# comma-separated list of search channel ids used by GetSearchResult
actionhandler.GetSearchResult.channels=OPENSTREETMAP_CHANNEL


# How many threads are created into a wfs executor thread pool, defaults to 5
#wfsexecutorservice.threadcount=15

# Proxy settings for EasyHttpClient - can be used to configure http proxy if needed
#easyhttpclient.proxy.port=800
#easyhttpclient.proxy.host=wwwp.nls.fi

# bundles that are added on runtime to view if user has one of configured role
#actionhandler.GetAppSetup.dynamic.bundles = admin-layerselector, admin-layerrights

# Linking dynamic bundles based on user roles
# Properties are named 'actionhandler.GetAppSetup.dynamic.[BUNDLE ID].roles'
#   with value as comma-separated list of role names that should be served the bundle
#actionhandler.GetAppSetup.dynamic.bundle.admin-layerrights.roles = Admin
#actionhandler.GetAppSetup.dynamic.bundle.admin-layerselector.roles = Admin

# Used to configure a template view for publishing maps
view.template.publish=${view.template.publish}

# redis
redis.hostname=${redis.hostname}
redis.port=${redis.port}
redis.pool.size=${redis.pool.size}

##############################
# proxy services
##############################
oskari.proxyservices=${oskari.proxyservices}

oskari.proxy.print.url=${oskari.proxy.print.url}
oskari.proxy.print.params=${oskari.proxy.print.params}
oskari.proxy.print.header.Content-Type=${oskari.proxy.print.header.Content-Type}

oskari.proxy.wfsquery.handler=${oskari.proxy.wfsquery.handler}
oskari.proxy.wfsquery.header.Content-Type=${oskari.proxy.wfsquery.header.Content-Type}

oskari.proxy.myplacestile.url=${oskari.proxy.myplacestile.url}
oskari.proxy.myplacestile.handler=${oskari.proxy.myplacestile.handler}
oskari.proxy.myplacestile.user=${oskari.proxy.myplacestile.user}
oskari.proxy.myplacestile.pass=${oskari.proxy.myplacestile.pass}

# My places query url
# MyPlacesBundleHandler.java, GeoServerProxyService.java
myplaces.ows.url=${myplaces.ows.url}
# MapFullHandler.java, MyPlacesHandler.java
myplaces.wms.url=${myplaces.wms.url}
myplaces.user=${myplaces.user}
myplaces.password=${myplaces.password}
